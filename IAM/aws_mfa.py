import os
import boto3
from configparser import RawConfigParser
from dataclasses import dataclass
from typing import Dict, List


@dataclass
class ProfileInfo:
    Name: str


def clear_aws_mfa(profile_name: str) -> None:
    """
    Clears the AWS MFA session for a given profile.

    Args:
        profile_name (str): The name of the AWS profile to clear.
    """
    session = boto3.Session(profile_name=profile_name)
    session._session.get_component('credential_provider')._credentials = None
    print(f"Cleared AWS MFA session for profile: {profile_name}")


def get_aws_credentials_expiration(profile) -> str:
    """ this doesn't work. boto3 doesn't read expiration info from ~/.aws/credentials file """
    try:
        session = boto3.Session(profile_name=profile)
        creds = session.get_credentials()

        # Check for expiration
        expiry_time = getattr(creds, 'expiry_time', None)
        if expiry_time is None:
            return 'No expiration (probably static credentials)'
        return expiry_time.strftime('%Y-%m-%d %H:%M:%S')
    except Exception as e:
        return f'Error: {e}'


def get_aws_credentials_expiration_from_file() -> Dict[str, str]:
    credentials_path = os.path.expanduser("~/.aws/credentials")
    config = RawConfigParser()
    config.read(credentials_path)

    ret = {}
    for profile in config.sections():
        expiration = config[profile].get('expiration', 'No expiration')
        ret[profile] = expiration
    return ret


def get_aws_profiles() -> List[str]:
    """
    Lists all available AWS profiles configured on this machine.

    Returns:
        List[str]: A list of tuples (profile_name, expire_time or None).
    """
    session = boto3.Session()
    profiles = session.available_profiles
    return profiles


def get_aws_profiles_short_term() -> List[str]:
    """
    List all AWS profiles that do not end with '-long-term'.

    Returns:
        List[str]: A List of profile names that are considered short-term profiles.
    """
    profiles = get_aws_profiles()
    return [profile for profile in profiles if not profile.endswith('-long-term')]


def list_aws_profiles_with_prefix(prefix: str) -> List[str]:
    """
    Lists all AWS profiles that start with a given prefix.

    Args:
        prefix (str): The prefix to filter profile names.

    Returns:
        List[str]: A list of profile names that start with the given prefix.
    """
    profiles = get_aws_profiles()
    return [profile for profile in profiles if profile.startswith(prefix)]


def set_aws_mfa(profile_name: str, mfa_serial: str, token_code: str) -> None:
    """
    Sets the AWS MFA session for a given profile.

    Args:
        profile_name (str): The name of the AWS profile to set.
        mfa_serial (str): The serial number of the MFA device.
        token_code (str): The token code generated by the MFA device.
    """
    session = boto3.Session(profile_name=profile_name)
    sts_client = session.client('sts')

    response = sts_client.get_session_token(
        SerialNumber=mfa_serial,
        TokenCode=token_code
    )

    credentials = response['Credentials']
    session._session.get_component('credential_provider')._credentials = credentials
    print(f"Set AWS MFA session for profile: {profile_name}")


if __name__ == "__main__":
    profiles = get_aws_profiles_short_term()
    profiles.sort(key=lambda x: x[0])  # Sort profiles by name

    profile_expiration = get_aws_credentials_expiration_from_file()
    for profile in profiles:
        print(profile, profile_expiration.get(profile, None))
